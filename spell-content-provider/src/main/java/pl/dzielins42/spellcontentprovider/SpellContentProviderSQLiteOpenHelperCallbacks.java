package pl.dzielins42.spellcontentprovider;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;


import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.List;


import pl.dzielins42.spellcontentprovider.base.BaseSQLiteOpenHelperCallbacks;
import pl.dzielins42.spellcontentprovider.characterclass.CharacterClassColumns;
import pl.dzielins42.spellcontentprovider.component.ComponentColumns;
import pl.dzielins42.spellcontentprovider.compositespell.CompositeSpellColumns;
import pl.dzielins42.spellcontentprovider.descriptor.DescriptorColumns;
import pl.dzielins42.spellcontentprovider.rulebook.RulebookColumns;
import pl.dzielins42.spellcontentprovider.school.SchoolColumns;
import pl.dzielins42.spellcontentprovider.spell.SpellColumns;
import pl.dzielins42.spellcontentprovider.spellstocharacterclasses.SpellsToCharacterClassesColumns;
import pl.dzielins42.spellcontentprovider.spellstocomponents.SpellsToComponentsColumns;
import pl.dzielins42.spellcontentprovider.spellstodescriptors.SpellsToDescriptorsColumns;
import pl.dzielins42.spellcontentprovider.spellstoschools.SpellsToSchoolsColumns;
import pl.dzielins42.spellcontentprovider.subschool.SubschoolColumns;

public class SpellContentProviderSQLiteOpenHelperCallbacks extends BaseSQLiteOpenHelperCallbacks {

    @Override
    public void onPostCreate(Context context, SQLiteDatabase db) {
        super.onPostCreate(context, db);

        // A little hack to use classes, methods etc generated by ACPG
        // Replace generated database table with database view
        db.execSQL("DROP TABLE IF EXISTS " + CompositeSpellColumns.TABLE_NAME);
        createCompositeSpellView(context, db);
    }

    private void createCompositeSpellView(Context context, SQLiteDatabase db) {
        StringBuilder sb = new StringBuilder();
        sb.append("CREATE VIEW IF NOT EXISTS ").append(CompositeSpellColumns.TABLE_NAME).append(" AS ");
        sb.append("SELECT ");

        List<String> aliasedColumns = new ArrayList<>();
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns._ID, CompositeSpellColumns._ID));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns._ID, CompositeSpellColumns.SPELL__ID));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.NAME, CompositeSpellColumns.SPELL_NAME));
        aliasedColumns.add(createAlias(RulebookColumns.TABLE_NAME, RulebookColumns._ID, CompositeSpellColumns.RULEBOOK__ID));
        aliasedColumns.add(createAlias(RulebookColumns.TABLE_NAME, RulebookColumns.NAME, CompositeSpellColumns.RULEBOOK_NAME));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.PAGE, CompositeSpellColumns.SPELL_PAGE));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.CASTING_TIME, CompositeSpellColumns.SPELL_CASTING_TIME));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.RANGE, CompositeSpellColumns.SPELL_RANGE));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.TARGET, CompositeSpellColumns.SPELL_TARGET));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.EFFECT, CompositeSpellColumns.SPELL_EFFECT));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.AREA, CompositeSpellColumns.SPELL_AREA));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.DURATION, CompositeSpellColumns.SPELL_DURATION));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.SAVING_THROW, CompositeSpellColumns.SPELL_SAVING_THROW));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.SPELL_RESISTANCE, CompositeSpellColumns.SPELL_SPELL_RESISTANCE));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.DESCRIPTION_PLAIN, CompositeSpellColumns.SPELL_DESCRIPTION_PLAIN));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.DESCRIPTION_FORMATTED, CompositeSpellColumns.SPELL_DESCRIPTION_FORMATTED));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.SHORT_DESCRIPTION_PLAIN, CompositeSpellColumns.SPELL_SHORT_DESCRIPTION_PLAIN));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.SHORT_DESCRIPTION_FORMATTED, CompositeSpellColumns.SPELL_SHORT_DESCRIPTION_FORMATTED));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.FLAVOUR_TEXT_PLAIN, CompositeSpellColumns.SPELL_FLAVOUR_TEXT_PLAIN));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.FLAVOUR_TEXT_FORMATTED, CompositeSpellColumns.SPELL_FLAVOUR_TEXT_FORMATTED));
        aliasedColumns.add(createAlias(SpellColumns.TABLE_NAME, SpellColumns.IS_RITUAL, CompositeSpellColumns.SPELL_IS_RITUAL));
        aliasedColumns.add(createAlias(CharacterClassColumns.TABLE_NAME, CharacterClassColumns._ID, CompositeSpellColumns.CHARACTER_CLASS__ID));
        aliasedColumns.add(createAlias(CharacterClassColumns.TABLE_NAME, CharacterClassColumns.NAME, CompositeSpellColumns.CHARACTER_CLASS_NAME));
        aliasedColumns.add(createAlias(SpellsToCharacterClassesColumns.TABLE_NAME, SpellsToCharacterClassesColumns.LEVEL, CompositeSpellColumns.CHARACTER_CLASS_LEVEL));
        aliasedColumns.add(createAlias(SpellsToCharacterClassesColumns.TABLE_NAME, SpellsToCharacterClassesColumns.EXTRA, CompositeSpellColumns.CHARACTER_CLASS_EXTRA));
        aliasedColumns.add(createAlias(ComponentColumns.TABLE_NAME, ComponentColumns._ID, CompositeSpellColumns.COMPONENT__ID));
        aliasedColumns.add(createAlias(ComponentColumns.TABLE_NAME, ComponentColumns.NAME, CompositeSpellColumns.COMPONENT_NAME));
        aliasedColumns.add(createAlias(DescriptorColumns.TABLE_NAME, DescriptorColumns._ID, CompositeSpellColumns.DESCRIPTOR__ID));
        aliasedColumns.add(createAlias(DescriptorColumns.TABLE_NAME, DescriptorColumns.NAME, CompositeSpellColumns.DESCRIPTOR_NAME));
        aliasedColumns.add(createAlias(SchoolColumns.TABLE_NAME, SchoolColumns._ID, CompositeSpellColumns.SCHOOL__ID));
        aliasedColumns.add(createAlias(SchoolColumns.TABLE_NAME, SchoolColumns.NAME, CompositeSpellColumns.SCHOOL_NAME));
        aliasedColumns.add(createAlias(SubschoolColumns.TABLE_NAME, SubschoolColumns._ID, CompositeSpellColumns.SUBSCHOOL__ID));
        aliasedColumns.add(createAlias(SubschoolColumns.TABLE_NAME, SubschoolColumns.NAME, CompositeSpellColumns.SUBSCHOOL_NAME));

        sb.append(StringUtils.join(aliasedColumns, ", "));

        sb.append(" FROM ");

        sb.append(SpellColumns.TABLE_NAME)
                .append(" LEFT OUTER JOIN ").append(RulebookColumns.TABLE_NAME)
                .append(" ON ").append(SpellColumns.TABLE_NAME).append(".").append(SpellColumns.RULEBOOK_ID).append(" = ").append(RulebookColumns.TABLE_NAME).append(".").append(RulebookColumns._ID)
                .append(" LEFT OUTER JOIN ").append(SpellsToCharacterClassesColumns.TABLE_NAME)
                .append(" ON ").append(SpellColumns.TABLE_NAME).append(".").append(SpellColumns._ID).append(" = ").append(SpellsToCharacterClassesColumns.TABLE_NAME).append(".").append(SpellsToCharacterClassesColumns.SPELL_ID)
                .append(" LEFT OUTER JOIN ").append(CharacterClassColumns.TABLE_NAME)
                .append(" ON ").append(CharacterClassColumns.TABLE_NAME).append(".").append(CharacterClassColumns._ID).append(" = ").append(SpellsToCharacterClassesColumns.TABLE_NAME).append(".").append(SpellsToCharacterClassesColumns.CHARACTER_CLASS_ID)
                .append(" LEFT OUTER JOIN ").append(SpellsToComponentsColumns.TABLE_NAME)
                .append(" ON ").append(SpellColumns.TABLE_NAME).append(".").append(SpellColumns._ID).append(" = ").append(SpellsToComponentsColumns.TABLE_NAME).append(".").append(SpellsToComponentsColumns.SPELL_ID)
                .append(" LEFT OUTER JOIN ").append(ComponentColumns.TABLE_NAME)
                .append(" ON ").append(ComponentColumns.TABLE_NAME).append(".").append(ComponentColumns._ID).append(" = ").append(SpellsToComponentsColumns.TABLE_NAME).append(".").append(SpellsToComponentsColumns.COMPONENT_ID)
                .append(" LEFT OUTER JOIN ").append(SpellsToDescriptorsColumns.TABLE_NAME)
                .append(" ON ").append(SpellColumns.TABLE_NAME).append(".").append(SpellColumns._ID).append(" = ").append(SpellsToComponentsColumns.TABLE_NAME).append(".").append(SpellsToDescriptorsColumns.SPELL_ID)
                .append(" LEFT OUTER JOIN ").append(DescriptorColumns.TABLE_NAME)
                .append(" ON ").append(DescriptorColumns.TABLE_NAME).append(".").append(DescriptorColumns._ID).append(" = ").append(SpellsToDescriptorsColumns.TABLE_NAME).append(".").append(SpellsToDescriptorsColumns.DESCRIPTOR_ID)
                .append(" LEFT OUTER JOIN ").append(SpellsToSchoolsColumns.TABLE_NAME)
                .append(" ON ").append(SpellColumns.TABLE_NAME).append(".").append(SpellColumns._ID).append(" = ").append(SpellsToSchoolsColumns.TABLE_NAME).append(".").append(SpellsToSchoolsColumns.FR_SPELL_ID)
                .append(" LEFT OUTER JOIN ").append(SchoolColumns.TABLE_NAME)
                .append(" ON ").append(SchoolColumns.TABLE_NAME).append(".").append(SchoolColumns._ID).append(" = ").append(SpellsToSchoolsColumns.TABLE_NAME).append(".").append(SpellsToSchoolsColumns.FR_SCHOOL_ID)
                .append(" LEFT OUTER JOIN ").append(SubschoolColumns.TABLE_NAME)
                .append(" ON ").append(SubschoolColumns.TABLE_NAME).append(".").append(SubschoolColumns._ID).append(" = ").append(SpellsToSchoolsColumns.TABLE_NAME).append(".").append(SpellsToSchoolsColumns.FR_SUBSCHOOL_ID);

        db.execSQL(sb.toString());
    }

    private String createAlias(String table, String column, String alias) {
        StringBuilder sb = new StringBuilder();
        sb.append(table).append(".").append(column).append(" AS ").append(alias);
        return sb.toString();
    }
}
