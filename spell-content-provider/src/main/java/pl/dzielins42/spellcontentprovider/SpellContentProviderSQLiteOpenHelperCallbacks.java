package pl.dzielins42.spellcontentprovider;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import pl.dzielins42.spellcontentprovider.base.BaseSQLiteOpenHelperCallbacks;
import pl.dzielins42.spellcontentprovider.characterclass.CharacterClassColumns;
import pl.dzielins42.spellcontentprovider.component.ComponentColumns;
import pl.dzielins42.spellcontentprovider.descriptor.DescriptorColumns;
import pl.dzielins42.spellcontentprovider.rulebook.RulebookColumns;
import pl.dzielins42.spellcontentprovider.school.SchoolBean;
import pl.dzielins42.spellcontentprovider.school.SchoolColumns;
import pl.dzielins42.spellcontentprovider.spellbase.SpellBaseColumns;
import pl.dzielins42.spellcontentprovider.spellcomposite.SpellCompositeColumns;
import pl.dzielins42.spellcontentprovider.spellstocharacterclasses.SpellsToCharacterClassesColumns;
import pl.dzielins42.spellcontentprovider.spellstocomponents.SpellsToComponentsColumns;
import pl.dzielins42.spellcontentprovider.spellstodescriptors.SpellsToDescriptorsColumns;

public class SpellContentProviderSQLiteOpenHelperCallbacks extends BaseSQLiteOpenHelperCallbacks {

    @Override
    public void onPostCreate(Context context, SQLiteDatabase db) {
        super.onPostCreate(context, db);

        // A little hack to use classes, methods etc generated by ACPG
        // Replace generated database tables with database views
        db.execSQL("DROP TABLE IF EXISTS " + SpellCompositeColumns.TABLE_NAME);
        createCompositeSpellView(context, db);
        // ACPG cannot create foreign key from the table to the same table
        // FK is added by this little hack
        db.execSQL("DROP TABLE IF EXISTS " + SchoolColumns.TABLE_NAME);
        String createSchoolTable = SpellContentProviderSQLiteOpenHelper.SQL_CREATE_TABLE_SCHOOL;
        createSchoolTable = createSchoolTable.replaceAll(
                "  \\);",
                ", CONSTRAINT fk_parent FOREIGN KEY (" + SchoolColumns.PARENT_ID + ") REFERENCES " + SchoolColumns.TABLE_NAME + " (" + SchoolColumns._ID + ") ON DELETE CASCADE);"
        );
        db.execSQL(createSchoolTable);
    }

    private void createCompositeSpellView(Context context, SQLiteDatabase db) {
        StringBuilder sb = new StringBuilder();
        sb.append("CREATE VIEW IF NOT EXISTS ").append(SpellCompositeColumns.TABLE_NAME).append(" AS ");
        sb.append("SELECT ");

        List<String> aliasedColumns = new ArrayList<>();
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns._ID, SpellCompositeColumns._ID));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns._ID, SpellCompositeColumns.SPELL__ID));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.NAME, SpellCompositeColumns.SPELL_NAME));
        aliasedColumns.add(createAlias("s1", SchoolColumns._ID, SpellCompositeColumns.SCHOOL_MAIN_TYPE_ID));
        aliasedColumns.add(createAlias("s1", SchoolColumns.NAME, SpellCompositeColumns.SCHOOL_MAIN_TYPE_NAME));
        aliasedColumns.add(createAlias("s2", SchoolColumns._ID, SpellCompositeColumns.SCHOOL_SUB_TYPE_ID));
        aliasedColumns.add(createAlias("s2", SchoolColumns.NAME, SpellCompositeColumns.SCHOOL_SUB_TYPE_NAME));
        aliasedColumns.add(createAlias(RulebookColumns.TABLE_NAME, RulebookColumns._ID, SpellCompositeColumns.RULEBOOK__ID));
        aliasedColumns.add(createAlias(RulebookColumns.TABLE_NAME, RulebookColumns.NAME, SpellCompositeColumns.RULEBOOK_NAME));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.PAGE, SpellCompositeColumns.SPELL_PAGE));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.CASTING_TIME, SpellCompositeColumns.SPELL_CASTING_TIME));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.RANGE, SpellCompositeColumns.SPELL_RANGE));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.TARGET, SpellCompositeColumns.SPELL_TARGET));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.EFFECT, SpellCompositeColumns.SPELL_EFFECT));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.AREA, SpellCompositeColumns.SPELL_AREA));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.DURATION, SpellCompositeColumns.SPELL_DURATION));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.SAVING_THROW, SpellCompositeColumns.SPELL_SAVING_THROW));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.SPELL_RESISTANCE, SpellCompositeColumns.SPELL_SPELL_RESISTANCE));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.DESCRIPTION_PLAIN, SpellCompositeColumns.SPELL_DESCRIPTION_PLAIN));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.DESCRIPTION_FORMATTED, SpellCompositeColumns.SPELL_DESCRIPTION_FORMATTED));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.SHORT_DESCRIPTION_PLAIN, SpellCompositeColumns.SPELL_SHORT_DESCRIPTION_PLAIN));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.SHORT_DESCRIPTION_FORMATTED, SpellCompositeColumns.SPELL_SHORT_DESCRIPTION_FORMATTED));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.FLAVOUR_TEXT_PLAIN, SpellCompositeColumns.SPELL_FLAVOUR_TEXT_PLAIN));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.FLAVOUR_TEXT_FORMATTED, SpellCompositeColumns.SPELL_FLAVOUR_TEXT_FORMATTED));
        aliasedColumns.add(createAlias(SpellBaseColumns.TABLE_NAME, SpellBaseColumns.IS_RITUAL, SpellCompositeColumns.SPELL_IS_RITUAL));
        aliasedColumns.add(createAlias(CharacterClassColumns.TABLE_NAME, CharacterClassColumns._ID, SpellCompositeColumns.CHARACTER_CLASS__ID));
        aliasedColumns.add(createAlias(CharacterClassColumns.TABLE_NAME, CharacterClassColumns.NAME, SpellCompositeColumns.CHARACTER_CLASS_NAME));
        aliasedColumns.add(createAlias(SpellsToCharacterClassesColumns.TABLE_NAME, SpellsToCharacterClassesColumns.LEVEL, SpellCompositeColumns.CHARACTER_CLASS_LEVEL));
        aliasedColumns.add(createAlias(SpellsToCharacterClassesColumns.TABLE_NAME, SpellsToCharacterClassesColumns.EXTRA, SpellCompositeColumns.CHARACTER_CLASS_EXTRA));
        aliasedColumns.add(createAlias(ComponentColumns.TABLE_NAME, ComponentColumns._ID, SpellCompositeColumns.COMPONENT__ID));
        aliasedColumns.add(createAlias(ComponentColumns.TABLE_NAME, ComponentColumns.NAME, SpellCompositeColumns.COMPONENT_NAME));
        aliasedColumns.add(createAlias(DescriptorColumns.TABLE_NAME, DescriptorColumns._ID, SpellCompositeColumns.DESCRIPTOR__ID));
        aliasedColumns.add(createAlias(DescriptorColumns.TABLE_NAME, DescriptorColumns.NAME, SpellCompositeColumns.DESCRIPTOR_NAME));

        sb.append(StringUtils.join(aliasedColumns, ", "));

        sb.append(" FROM ");

        sb.append(SpellBaseColumns.TABLE_NAME)
                .append(" LEFT OUTER JOIN ").append(RulebookColumns.TABLE_NAME)
                .append(" ON ").append(SpellBaseColumns.TABLE_NAME).append(".").append(SpellBaseColumns.RULEBOOK_ID).append(" = ").append(RulebookColumns.TABLE_NAME).append(".").append(RulebookColumns._ID)
                .append(" LEFT OUTER JOIN ").append(SpellsToCharacterClassesColumns.TABLE_NAME)
                .append(" ON ").append(SpellBaseColumns.TABLE_NAME).append(".").append(SpellBaseColumns._ID).append(" = ").append(SpellsToCharacterClassesColumns.TABLE_NAME).append(".").append(SpellsToCharacterClassesColumns.SPELL_ID)
                .append(" LEFT OUTER JOIN ").append(CharacterClassColumns.TABLE_NAME)
                .append(" ON ").append(CharacterClassColumns.TABLE_NAME).append(".").append(CharacterClassColumns._ID).append(" = ").append(SpellsToCharacterClassesColumns.TABLE_NAME).append(".").append(SpellsToCharacterClassesColumns.CHARACTER_CLASS_ID)
                .append(" LEFT OUTER JOIN ").append(SpellsToComponentsColumns.TABLE_NAME)
                .append(" ON ").append(SpellBaseColumns.TABLE_NAME).append(".").append(SpellBaseColumns._ID).append(" = ").append(SpellsToComponentsColumns.TABLE_NAME).append(".").append(SpellsToComponentsColumns.SPELL_ID)
                .append(" LEFT OUTER JOIN ").append(ComponentColumns.TABLE_NAME)
                .append(" ON ").append(ComponentColumns.TABLE_NAME).append(".").append(ComponentColumns._ID).append(" = ").append(SpellsToComponentsColumns.TABLE_NAME).append(".").append(SpellsToComponentsColumns.COMPONENT_ID)
                .append(" LEFT OUTER JOIN ").append(SpellsToDescriptorsColumns.TABLE_NAME)
                .append(" ON ").append(SpellBaseColumns.TABLE_NAME).append(".").append(SpellBaseColumns._ID).append(" = ").append(SpellsToComponentsColumns.TABLE_NAME).append(".").append(SpellsToDescriptorsColumns.SPELL_ID)
                .append(" LEFT OUTER JOIN ").append(DescriptorColumns.TABLE_NAME)
                .append(" ON ").append(DescriptorColumns.TABLE_NAME).append(".").append(DescriptorColumns._ID).append(" = ").append(SpellsToDescriptorsColumns.TABLE_NAME).append(".").append(SpellsToDescriptorsColumns.DESCRIPTOR_ID)
                .append(" LEFT OUTER JOIN ").append(SchoolColumns.TABLE_NAME).append(" AS s1")
                .append(" ON ").append("s1.").append(SchoolColumns._ID).append(" = ").append(SpellBaseColumns.TABLE_NAME).append(".").append(SpellBaseColumns.SCHOOL_ID)
                .append(" LEFT OUTER JOIN ").append(SchoolColumns.TABLE_NAME).append(" AS s2")
                .append(" ON ").append("s1.").append(SchoolColumns._ID).append(" = s2.").append(SchoolColumns.PARENT_ID);

        db.execSQL(sb.toString());
    }

    private String createTableColumn(String table, String column) {
        StringBuilder sb = new StringBuilder();
        sb.append(table).append(".").append(column);
        return sb.toString();
    }

    private String createAlias(String table, String column, String alias) {
        StringBuilder sb = new StringBuilder();
        sb.append(createTableColumn(table, column)).append(" AS ").append(alias);
        return sb.toString();
    }
}
